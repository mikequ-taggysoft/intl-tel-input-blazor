@inherits InputBase<IntlTel>
@inject IntlTelInputJsInterop _intlTelInputJsInterop

<input @onblur="OnBlurAsync" type="tel" @ref="_telInput" placeholder="@Placeholder" class="@Class"/>

@code {

    [Parameter]
    public bool AllowDropDown { get; set; } = true;
    
    [Parameter]
    public bool AutoHideDialCode { get; set; } = true;

    [Parameter]
    public string AutoPlaceholder { get; set; } = "polite";

    [Parameter]
    public string Placeholder { get; set; }
    
    [Parameter]
    public string CustomContainer { get; set; }
    
    [Parameter]
    public IEnumerable<string> ExcludeCountries { get; set; } = Enumerable.Empty<string>();
    
    [Parameter]
    public bool FormatOnDisplay { get; set; } = true;
    
    [Parameter]
    public string InitialCountry { get; set; }

    [Parameter]
    public Dictionary<string, string> LocalizedCountries { get; set; }
    
    [Parameter]
    public bool NationalMode { get; set; } = true;
    
    [Parameter]
    public IEnumerable<string> OnlyCountries { get; set; } = Enumerable.Empty<string>();
    
    [Parameter]
    public string PlaceholderNumberType { get; set; } = "MOBILE";
    
    [Parameter]
    public IEnumerable<string> PreferredCountries { get; set; } = new[] {"us", "gb"};

    [Parameter]
    public bool SeparateDialCode { get; set; } = true;

    [Parameter]
    public string UtilsScript { get; set; } = "./_content/IntlTelInputBlazor/js/utils.js";
   
    [Parameter]
    public string Class { get; set; }

    ElementReference _telInput;

    private int _inputIndex;

    private bool _loaded;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _inputIndex = await _intlTelInputJsInterop.Init(_telInput, new
            {
                AllowDropDown,
                AutoHideDialCode,
                AutoPlaceholder,
                CustomContainer,
                ExcludeCountries,
                FormatOnDisplay,
                InitialCountry,
                LocalizedCountries,
                NationalMode,
                OnlyCountries,
                PlaceholderNumberType,
                PreferredCountries,
                SeparateDialCode,
                UtilsScript
            });

            if (CurrentValue is not null)
            {
                CurrentValue = await _intlTelInputJsInterop.SetNumber(_inputIndex, CurrentValue.Number);
            }

            _loaded = true;
        }
    }
    
    protected override bool TryParseValueFromString(string value, out IntlTel result, out string validationErrorMessage)
    {
        throw new NotImplementedException();
    }

    /*We want to use OnBlur instead of OnChange because the latter will not triger validation when country is changed from the
      dropdown box but number remains unchanged. We add a _loaded check to avoid exception during initial page load triggering 
      this event before the OnAfterRenderAsync completes */

    private async Task OnBlurAsync()
    {
       if (_loaded)
        {
            CurrentValue = await _intlTelInputJsInterop.GetData(_inputIndex);

            if (CurrentValue is not null)
            {
                CurrentValue = await _intlTelInputJsInterop.SetNumber(_inputIndex, CurrentValue.Number);
            }
        }
    }
}